@page "/test-spacedevs"
@rendermode InteractiveServer
@using spaceTracker.Models
@using spaceTracker.Services
@inject SpaceDevsService SpaceDevsService
@inject ILogger<RawDataSpaceDevs> Logger



<PageTitle>SpaceDevs Service Test Harness</PageTitle>

<h1>üöÄ SpaceDevs Service Test Harness</h1>
<p>
    This page calls every method in the <code>SpaceDevsService</code> to verify that the API calls and JSON deserialization are working correctly.
</p>

<button class="btn btn-primary" @onclick="RunAllTestsAsync" disabled="@_isLoading">
    @if (_isLoading)
    {
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        <span> Running Tests...</span>
    }
    else
    {
        <span>Run All Tests</span>
    }
</button>

<button class="btn btn-secondary" @onclick="ClearLogs" disabled="@_isLoading">
    Clear Logs
</button>

<hr />

<h3>Test Results:</h3>

@if (_logMessages.Count == 0)
{
    <p>No tests run yet. Click the button to start.</p>
}
else
{
    <ul class="list-group">
        @foreach (var message in _logMessages)
        {
            <li class="list-group-item @GetLogClass(message)">
                @((MarkupString)message)
            </li>
        }
    </ul>
}


@code {
    private bool _isLoading = false;
    private List<string> _logMessages = new();

private async Task RunAllTestsAsync()
{
    ClearLogs();
    _isLoading = true;
    StateHasChanged();

    try
    {
        AddLog("<em>Starting SpaceDevs API tests...</em>", true);

        await TestLaunchesAsync();
        await TestEventsAsync();
        await TestAstronautsAsync();
        await TestSpacewalksAsync();
        await TestSpaceStationsAsync();
        await TestDockingEventsAsync();
        await TestExpeditionsAsync();
        await TestAgenciesAsync();
        await TestProgramsAsync();
        await TestSpacecraftAsync();
        await TestStarshipDashboardAsync();
        await TestLauncherConfigurationsAsync();
        await TestLocationsAndPadsAsync();

        AddLog("<strong>‚úÖ All tests completed!</strong>", true);
    }
    catch (Exception ex)
    {
        AddLog($"<strong>‚ùå Critical failure:</strong> {ex.Message}", false);
    }
    finally
    {
        _isLoading = false;
        await InvokeAsync(StateHasChanged);
    }
}


    private void AddLog(string message, bool isSuccess)
    {
        var status = isSuccess ? "<strong class='text-success'>SUCCESS</strong>" : "<strong class='text-danger'>FAILURE</strong>";
        _logMessages.Add($"{status}: {message}");
        InvokeAsync(StateHasChanged); // Re-render the component
    }

    private void ClearLogs()
    {
        _logMessages.Clear();
    }

    private string GetLogClass(string message)
    {
        if (message.Contains("SUCCESS")) return "list-group-item-success";
        if (message.Contains("FAILURE")) return "list-group-item-danger";
        return "";
    }

    // Individual Test Methods
    private async Task TestLaunchesAsync()
    {
        try
        {
            var upcoming = await SpaceDevsService.GetUpcomingLaunchesAsync(1);
            AddLog("GetUpcomingLaunchesAsync returned a result.", upcoming != null);
            // Console.WriteLine($"Upcoming Launches: {upcoming[index: 0].Pad.latitude}, {upcoming[0].Pad.longitude}");

            var previous = await SpaceDevsService.GetPreviousLaunchesAsync(1);
            AddLog("GetPreviousLaunchesAsync returned a result.", previous != null);

            if (upcoming != null && upcoming.Any())
            {
                var launchById = await SpaceDevsService.GetLaunchByIdAsync(upcoming.First().Id);
                AddLog($"GetLaunchByIdAsync for ID '{upcoming.First().Id}' returned a result.", launchById != null);
            }
            else
            {
                 AddLog("Skipping GetLaunchByIdAsync test because no upcoming launches were found.", false);
            }
        }
        catch (Exception ex)
        {
            AddLog($"An exception occurred in Launch tests: {ex.Message}", false);
        }
    }

    private async Task TestEventsAsync()
    {
        try
        {
            var upcoming = await SpaceDevsService.GetUpcomingEventsAsync(1);
            AddLog("GetUpcomingEventsAsync returned a result.", upcoming != null);

            var previous = await SpaceDevsService.GetPreviousEventsAsync(1);
            AddLog("GetPreviousEventsAsync returned a result.", previous != null);
        }
        catch (Exception ex)
        {
            AddLog($"An exception occurred in Event tests: {ex.Message}", false);
        }
    }

    private async Task TestAstronautsAsync()
    {
        try
        {
            var astronauts = await SpaceDevsService.GetAstronautsAsync(1);
            AddLog("GetAstronautsAsync returned a result.", astronauts != null);

            if (astronauts != null && astronauts.Any())
            {
                var astronautById = await SpaceDevsService.GetAstronautByIdAsync(astronauts.First().Id);
                AddLog($"GetAstronautByIdAsync for ID '{astronauts.First().Id}' returned a result.", astronautById != null);
            }
            else
            {
                AddLog("Skipping GetAstronautByIdAsync test because no astronauts were found.", false);
            }
        }
        catch (Exception ex)
        {
            AddLog($"An exception occurred in Astronaut tests: {ex.Message}", false);
        }
    }

    private async Task TestSpacewalksAsync()
    {
        try
        {
            var spacewalks = await SpaceDevsService.GetSpacewalksAsync(1);
            AddLog("GetSpacewalksAsync returned a result.", spacewalks != null);
        }
        catch (Exception ex)
        {
            AddLog($"An exception occurred in Spacewalk tests: {ex.Message}", false);
        }
    }

    private async Task TestSpaceStationsAsync()
    {
        try
        {
            var stations = await SpaceDevsService.GetSpaceStationsAsync(1);
            AddLog("GetSpaceStationsAsync returned a result.", stations != null);

            if (stations != null && stations.Any())
            {
                var stationById = await SpaceDevsService.GetSpaceStationByIdAsync(stations.First().Id);
                AddLog($"GetSpaceStationByIdAsync for ID '{stations.First().Id}' returned a result.", stationById != null);
            }
            else
            {
                AddLog("Skipping GetSpaceStationByIdAsync test because no space stations were found.", false);
            }
        }
        catch (Exception ex)
        {
            AddLog($"An exception occurred in Space Station tests: {ex.Message}", false);
        }
    }

    private async Task TestDockingEventsAsync()
    {
        try
        {
            var dockingEvents = await SpaceDevsService.GetDockingEventsAsync(1);
            AddLog("GetDockingEventsAsync returned a result.", dockingEvents != null);
        }
        catch (Exception ex)
        {
            AddLog($"An exception occurred in Docking Event tests: {ex.Message}", false);
        }
    }
    
    private async Task TestExpeditionsAsync()
    {
        try
        {
            var expeditions = await SpaceDevsService.GetExpeditionsAsync(1);
            AddLog("GetExpeditionsAsync returned a result.", expeditions != null);
        }
        catch (Exception ex)
        {
            AddLog($"An exception occurred in Expedition tests: {ex.Message}", false);
        }
    }

    private async Task TestAgenciesAsync()
    {
        try
        {
            var agencies = await SpaceDevsService.GetAgenciesAsync(1);
            AddLog("GetAgenciesAsync returned a result.", agencies != null);

            if (agencies != null && agencies.Any())
            {
                var agencyById = await SpaceDevsService.GetAgencyByIdAsync(agencies.First().Id);
                AddLog($"GetAgencyByIdAsync for ID '{agencies.First().Id}' returned a result.", agencyById != null);
            }
            else
            {
                AddLog("Skipping GetAgencyByIdAsync test because no agencies were found.", false);
            }
        }
        catch (Exception ex)
        {
            AddLog($"An exception occurred in Agency tests: {ex.Message}", false);
        }
    }

    private async Task TestProgramsAsync()
    {
        try
        {
            var programs = await SpaceDevsService.SpaceProg(1);
            AddLog("SpaceProg (Get Programs) returned a result.", programs != null);
        }
        catch (Exception ex)
        {
            AddLog($"An exception occurred in Program tests: {ex.Message}", false);
        }
    }
    
    private async Task TestSpacecraftAsync()
    {
        try
        {
            var spacecraft = await SpaceDevsService.GetSpacecraftAsync(1);
            AddLog("GetSpacecraftAsync returned a result.", spacecraft != null);
        }
        catch (Exception ex)
        {
            AddLog($"An exception occurred in Spacecraft tests: {ex.Message}", false);
        }
    }
    
    private async Task TestStarshipDashboardAsync()
    {
        try
        {
            var dashboard = await SpaceDevsService.GetStarshipDashboardAsync();
            AddLog("GetStarshipDashboardAsync returned a result.", dashboard != null);
        }
        catch (Exception ex)
        {
            AddLog($"An exception occurred in Starship Dashboard tests: {ex.Message}", false);
        }
    }

    private async Task TestLauncherConfigurationsAsync()
    {
        try
        {
            var configs = await SpaceDevsService.GetLauncherConfigurationsAsync(1);
            AddLog("GetLauncherConfigurationsAsync returned a result.", configs != null);
        }
        catch (Exception ex)
        {
            AddLog($"An exception occurred in Launcher Configuration tests: {ex.Message}", false);
        }
    }

    private async Task TestLocationsAndPadsAsync()
    {
        try
        {
            var locations = await SpaceDevsService.GetLocationsAsync(1);
            AddLog("GetLocationsAsync returned a result.", locations != null);

            var pads = await SpaceDevsService.GetPadsAsync(1);
            AddLog("GetPadsAsync returned a result.", pads != null);
        }
        catch (Exception ex)
        {
            AddLog($"An exception occurred in Location/Pad tests: {ex.Message}", false);
        }
    }
}