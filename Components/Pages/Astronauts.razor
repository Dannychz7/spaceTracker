@page "/astronauts"
@using spaceTracker.Models
@using spaceTracker.Services
@inject SpaceDevsService spaceDevsService
@rendermode InteractiveServer

<PageTitle>Astronauts</PageTitle>

<h1>Famous Astronauts</h1>

<div class="search-container">
    <input type="text" 
           placeholder="Search astronaut..." 
           @bind="searchTerm" 
           @bind:event="oninput" 
           @onkeyup="OnSearchInput" />
    
    @if (!string.IsNullOrEmpty(searchTerm) && showSearchPreview)
    {
        <div class="search-preview">
            @if (searchPreviewResults.Any())
            {
                @foreach (var astronaut in searchPreviewResults.Take(5))
                {
                    <div class="search-preview-item" @onclick="() => SelectAstronautFromPreview(astronaut)">
                        @if (!string.IsNullOrEmpty(astronaut.ProfileImageThumbnail))
                        {
                            <img src="@astronaut.ProfileImageThumbnail" alt="@astronaut.Name" class="search-preview-image" />
                        }
                        else
                        {
                            <div class="search-preview-image placeholder">
                                <span>@(astronaut.Name?[0])</span>
                            </div>
                        }
                        <div class="search-preview-info">
                            <div class="search-preview-name">@astronaut.Name</div>
                            <div class="search-preview-agency">@astronaut.Agency?.Name</div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="search-preview-item">
                    No matching astronauts found
                </div>
            }
        </div>
    }
</div>

<div class="astronaut-stack">
    @if (!string.IsNullOrEmpty(searchTerm) && !FilteredAstronauts.Any())
    {
        <div class="no-results">
            <h3>No Astronauts Found</h3>
            <p>No astronauts match your search term "@searchTerm"</p>
            <div class="suggestion">
                Try:
                <ul>
                    <li>Checking for typos</li>
                    <li>Using fewer keywords</li>
                    <li>Searching by nationality or agency</li>
                </ul>
            </div>
        </div>
    }
    else if (FilteredAstronauts.Any())
    {
        <div class="card-container">
            @foreach (var astronaut in FilteredAstronauts)
            {
                var index = FilteredAstronauts.ToList().IndexOf(astronaut);
                <div class="astronaut-card @(index == currentIndex ? "active" : "")"
                     style="transform: translateX(@(100 * (index - currentIndex))%) scale(@(index == currentIndex ? "1" : "0.9"))">
                    <div class="card-content">
                        <div class="profile-header">
                            @if (!string.IsNullOrEmpty(astronaut.ProfileImage))
                            {
                                <img src="@astronaut.ProfileImage" alt="@astronaut.Name" class="astronaut-image" @onerror="e => OnImageError(e, astronaut)" />
                            }
                            else if (!string.IsNullOrEmpty(astronaut.ProfileImageThumbnail))
                            {
                                <img src="@astronaut.ProfileImageThumbnail" alt="@astronaut.Name" class="astronaut-image" />
                            }
                            else
                            {
                                <div class="astronaut-image placeholder">
                                    <span>@(astronaut.Name?[0])</span>
                                </div>
                            }
                            <div class="profile-info">
                                <h2>@astronaut.Name</h2>
                                <p class="nationality">@(string.Join(", ", astronaut.Nationality?.Select(n => n.NationalityName) ?? Array.Empty<string>()))</p>
                                <p class="status @(astronaut.Status?.Name?.ToLower() ?? "unknown")">@(astronaut.Status?.Name ?? "Status Unknown")</p>
                                <p class="agency">@astronaut.Agency?.Name</p>
                            </div>
                        </div>

                        <div class="stats-dashboard">
                            <div class="stat-group">
                                <div class="stat">
                                    <span class="number">@astronaut.FlightsCount</span>
                                    <span class="label">Flights</span>
                                </div>
                                <div class="stat">
                                    <span class="number">@astronaut.LandingsCount</span>
                                    <span class="label">Landings</span>
                                </div>
                                <div class="stat">
                                    <span class="number">@astronaut.SpacewalksCount</span>
                                    <span class="label">Spacewalks</span>
                                </div>
                            </div>
                            @if (!string.IsNullOrEmpty(astronaut.TimeInSpace))
                            {
                                <div class="time-in-space">
                                    <span class="label">Time in Space:</span>
                                    <span class="value">@FormatTimeInSpace(astronaut.TimeInSpace)</span>
                                </div>
                            }
                        </div>

                        <div class="career-timeline">
                            @if (astronaut.FirstFlight.HasValue || astronaut.LastFlight.HasValue)
                            {
                                <h3>Career Timeline</h3>
                                @if (astronaut.FirstFlight.HasValue)
                                {
                                    <div class="timeline-entry">
                                        <span class="date">@astronaut.FirstFlight.Value.ToString("MMMM d, yyyy")</span>
                                        <span class="event">First Space Flight</span>
                                    </div>
                                }
                                @if (astronaut.LastFlight.HasValue && astronaut.LastFlight != astronaut.FirstFlight)
                                {
                                    <div class="timeline-entry">
                                        <span class="date">@astronaut.LastFlight.Value.ToString("MMMM d, yyyy")</span>
                                        <span class="event">Last Space Flight</span>
                                    </div>
                                }
                            }
                        </div>

                        @if (!string.IsNullOrEmpty(astronaut.Bio))
                        {
                            <div class="biography">
                                <h3>Biography</h3>
                                <p>@astronaut.Bio</p>
                            </div>
                        }

                        <div class="social-links">
                            @if (!string.IsNullOrEmpty(astronaut.Twitter))
                            {
                                <a href="@astronaut.Twitter" target="_blank" class="social-link twitter">
                                    Twitter
                                </a>
                            }
                            @if (!string.IsNullOrEmpty(astronaut.Instagram))
                            {
                                <a href="@astronaut.Instagram" target="_blank" class="social-link instagram">
                                    Instagram
                                </a>
                            }
                            @if (!string.IsNullOrEmpty(astronaut.Wiki))
                            {
                                <a href="@astronaut.Wiki" target="_blank" class="social-link wiki">
                                    Wikipedia
                                </a>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="navigation-buttons">
            <button @onclick="ShowPrevious" disabled="@(currentIndex == 0)">Previous</button>
            <button @onclick="ShowNext" disabled="@(currentIndex >= FilteredAstronauts.Count() - 1)">Next</button>
        </div>
        
        @if (astronauts.Count >= PageSize)
        {
            <div class="load-more">
                <button @onclick="LoadMoreAstronauts" class="load-more-button">Load More Astronauts</button>
            </div>
        }
    }
    else
    {
        <p>Loading astronauts...</p>
    }
</div>

<style>
    .search-container {
        margin: 20px 0;
        position: relative;
        width: 100%;
        max-width: 400px;
    }

    .search-container input {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
        transition: border-color 0.3s ease;
    }

    .search-container input:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
    }

    .search-preview {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: white;
        border: 1px solid #ddd;
        border-radius: 4px;
        margin-top: 4px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        z-index: 1000;
        max-height: 300px;
        overflow-y: auto;
    }

    .search-preview-item {
        padding: 10px;
        border-bottom: 1px solid #eee;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .search-preview-item:last-child {
        border-bottom: none;
    }

    .search-preview-item:hover {
        background-color: #f8f9fa;
    }

    .search-preview-image {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
    }

    .search-preview-info {
        flex-grow: 1;
    }

    .search-preview-name {
        font-weight: 500;
        color: #2c3e50;
    }

    .search-preview-agency {
        font-size: 0.9em;
        color: #666;
    }

    .no-results {
        text-align: center;
        padding: 40px 20px;
        background: #f8f9fa;
        border-radius: 8px;
        margin: 20px 0;
    }

    .no-results h3 {
        color: #2c3e50;
        margin-bottom: 10px;
    }

    .no-results p {
        color: #666;
        margin-bottom: 20px;
    }

    .no-results .suggestion {
        font-size: 0.9em;
        color: #666;
    }

    .astronaut-stack {
        position: relative;
        margin: 20px auto;
        max-width: 800px;
    }

    .card-container {
        position: relative;
        height: 800px;
        overflow: hidden;
    }

    .astronaut-card {
        position: absolute;
        width: 100%;
        height: 100%;
        transition: all 0.5s ease;
        background: white;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        opacity: 0.7;
    }

    .astronaut-card.active {
        opacity: 1;
        z-index: 1;
    }

    .card-content {
        padding: 20px;
        height: 100%;
        overflow-y: auto;
        opacity: 0.7;
        transition: opacity 0.5s ease;
    }

    .active .card-content {
        opacity: 1;
    }

    /* Profile Header Styles */
    .profile-header {
        display: flex;
        align-items: start;
        gap: 20px;
        margin-bottom: 30px;
    }

    .astronaut-image {
        width: 180px;
        height: 180px;
        object-fit: cover;
        border-radius: 50%;
        flex-shrink: 0;
        background-color: #f0f0f0;
        border: 4px solid #fff;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }

    .astronaut-image.placeholder {
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #007bff;
        color: white;
        font-size: 64px;
        font-weight: bold;
    }

    .profile-info {
        flex-grow: 1;
    }

    .profile-info h2 {
        margin: 0 0 10px;
        font-size: 2em;
        color: #2c3e50;
    }

    .nationality {
        color: #666;
        margin-bottom: 5px;
        font-size: 1.1em;
    }

    .status {
        display: inline-block;
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.9em;
        margin: 8px 0;
    }

    .status.active { background-color: #28a745; color: white; }
    .status.retired { background-color: #6c757d; color: white; }
    .status.deceased { background-color: #343a40; color: white; }
    .status.unknown { background-color: #f8f9fa; color: #666; }

    .agency {
        color: #007bff;
        font-weight: 500;
    }

    /* Stats Dashboard */
    .stats-dashboard {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 12px;
        padding: 20px;
        margin: 20px 0;
    }

    .stat-group {
        display: flex;
        justify-content: space-around;
        text-align: center;
        margin-bottom: 15px;
    }

    .stat {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .stat .number {
        font-size: 2em;
        font-weight: bold;
        color: #2c3e50;
        line-height: 1;
    }

    .stat .label {
        color: #666;
        font-size: 0.9em;
        margin-top: 5px;
    }

    .time-in-space {
        text-align: center;
        margin-top: 15px;
        padding: 15px;
        border-top: 1px solid rgba(0,0,0,0.1);
        background: #f1f5f9;
        border-radius: 8px;
    }

    .time-in-space .label {
        font-weight: 500;
        margin-right: 8px;
        display: block;
        margin-bottom: 5px;
        color: #4a5568;
    }

    .time-in-space .value {
        font-size: 1.2em;
        font-weight: 600;
        color: #2d3748;
    }

    /* Career Timeline */
    .career-timeline {
        margin: 25px 0;
    }

    .career-timeline h3 {
        color: #2c3e50;
        margin-bottom: 15px;
    }

    .timeline-entry {
        display: flex;
        align-items: center;
        margin: 10px 0;
        padding: 10px;
        background: #f8f9fa;
        border-radius: 8px;
    }

    .timeline-entry .date {
        min-width: 150px;
        font-weight: 500;
        color: #007bff;
    }

    .timeline-entry .event {
        color: #495057;
    }

    /* Biography */
    .biography {
        margin: 25px 0;
    }

    .biography h3 {
        color: #2c3e50;
        margin-bottom: 15px;
    }

    .biography p {
        line-height: 1.6;
        color: #495057;
    }

    /* Social Links */
    .social-links {
        display: flex;
        gap: 10px;
        margin-top: 20px;
    }

    .social-link {
        display: inline-flex;
        align-items: center;
        padding: 8px 16px;
        border-radius: 20px;
        text-decoration: none;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .social-link.twitter {
        background-color: #1da1f2;
        color: white;
    }

    .social-link.instagram {
        background: linear-gradient(45deg, #405de6, #5851db, #833ab4, #c13584, #e1306c, #fd1d1d);
        color: white;
    }

    .social-link.wiki {
        background-color: #2c3e50;
        color: white;
    }

    .social-link:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }

    .navigation-buttons {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-top: 20px;
    }

    .navigation-buttons button {
        padding: 10px 20px;
        border: none;
        background-color: #007bff;
        color: white;
        border-radius: 4px;
        cursor: pointer;
    }

    .navigation-buttons button:disabled {
        background-color: #ccc;
        cursor: not-allowed;
    }

    .navigation-buttons button:hover:not(:disabled) {
        background-color: #0056b3;
    }

    .load-more {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    .load-more-button {
        padding: 10px 20px;
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .load-more-button:hover {
        background-color: #218838;
    }
</style>

@code {
    private string searchTerm = string.Empty;
    private List<Astronaut> astronauts = new();
    private List<Astronaut> searchPreviewResults = new();
    private bool showSearchPreview = false;
    private int currentIndex = 0;
    private int currentOffset = 0;
    private const int PageSize = 50; // Increased to get more astronauts

    protected override async Task OnInitializedAsync()
    {
        await LoadAstronauts();
        await base.OnInitializedAsync();
    }

    private async Task LoadAstronauts(bool append = false)
    {
        try
        {
            var newAstronauts = await spaceDevsService.GetAstronautsAsync(
                limit: PageSize, 
                offset: append ? currentOffset + PageSize : 0, 
                search: searchTerm
            );

            if (append && newAstronauts.Any())
            {
                astronauts.AddRange(newAstronauts);
                currentOffset += PageSize;
            }
            else
            {
                astronauts = newAstronauts;
                currentOffset = 0;
                currentIndex = 0;
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading astronauts: {ex.Message}");
        }
    }

    private async Task LoadMoreAstronauts()
    {
        await LoadAstronauts(append: true);
    }

    private void ShowNext()
    {
        if (currentIndex < astronauts.Count - 1)
        {
            currentIndex++;
            StateHasChanged();
        }
    }

    private void ShowPrevious()
    {
        if (currentIndex > 0)
        {
            currentIndex--;
            StateHasChanged();
        }
    }

    private async Task OnSearchChanged()
    {
        currentIndex = 0;
        currentOffset = 0;
        await LoadAstronauts();
    }

    private IEnumerable<Astronaut> FilteredAstronauts => astronauts;

    private async Task OnSearchInput(KeyboardEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            showSearchPreview = false;
            searchPreviewResults.Clear();
            return;
        }

        showSearchPreview = true;
        searchPreviewResults = astronauts
            .Where(a => (a.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                       (a.Agency?.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                       (a.Nationality != null && a.Nationality.Any(n => n.NationalityName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)))
            .ToList();

        if (e.Key == "Enter")
        {
            await OnSearchChanged();
            showSearchPreview = false;
        }
    }

    private void SelectAstronautFromPreview(Astronaut selected)
    {
        showSearchPreview = false;
        var index = astronauts.IndexOf(selected);
        if (index != -1)
        {
            currentIndex = index;
            StateHasChanged();
        }
    }

    private void OnImageError(Microsoft.AspNetCore.Components.Web.ErrorEventArgs e, Astronaut astronaut)
    {
        // If the main image fails, try to fall back to the thumbnail
        if (!string.IsNullOrEmpty(astronaut.ProfileImage) && !string.IsNullOrEmpty(astronaut.ProfileImageThumbnail))
        {
            astronaut.ProfileImage = astronaut.ProfileImageThumbnail;
            StateHasChanged();
        }
    }

    private string FormatTimeInSpace(string? isoDuration)
    {
        if (string.IsNullOrEmpty(isoDuration))
            return "Unknown";

        try
        {
            // Remove the 'P' prefix and split between days (D) and time (T)
            var parts = isoDuration.TrimStart('P').Split('T');
            
            // Parse days
            var days = 0;
            if (parts[0].Contains("D"))
            {
                days = int.Parse(parts[0].TrimEnd('D'));
            }

            // Parse hours, minutes, seconds if they exist
            var hours = 0;
            var minutes = 0;
            var seconds = 0;
            
            if (parts.Length > 1)
            {
                var timePart = parts[1];
                
                if (timePart.Contains("H"))
                {
                    var hourIndex = timePart.IndexOf("H");
                    hours = int.Parse(timePart[..hourIndex]);
                    timePart = timePart[(hourIndex + 1)..];
                }
                
                if (timePart.Contains("M"))
                {
                    var minIndex = timePart.IndexOf("M");
                    minutes = int.Parse(timePart[..minIndex]);
                    timePart = timePart[(minIndex + 1)..];
                }
                
                if (timePart.Contains("S"))
                {
                    seconds = int.Parse(timePart.TrimEnd('S'));
                }
            }

            // Build the readable string
            var timeComponents = new List<string>();
            
            if (days > 0)
                timeComponents.Add($"{days} day{(days != 1 ? "s" : "")}");
            if (hours > 0)
                timeComponents.Add($"{hours} hour{(hours != 1 ? "s" : "")}");
            if (minutes > 0)
                timeComponents.Add($"{minutes} minute{(minutes != 1 ? "s" : "")}");
            if (seconds > 0 && days == 0) // Only show seconds if less than a day
                timeComponents.Add($"{seconds} second{(seconds != 1 ? "s" : "")}");

            return string.Join(", ", timeComponents);
        }
        catch
        {
            return "Format Error";
        }
    }
}
